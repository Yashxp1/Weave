// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  profilePic     String?
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts           Post[]
  comments        Comment[]
  likes           Like[]
  followers       Follow[]  @relation("followers")
  following       Follow[]  @relation("following")
  messageSent     Message[] @relation("messagesSent")
  messageReceived Message[] @relation("messagesReceived")
  reposts         Repost[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes    Like[]
  reposts  Repost[]
}

model Comment {
  id       String @id @default(cuid())
  content  String
  authorId String
  postId   String

  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Repost {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower User @relation("following", fields: [followerId], references: [id])

  following User @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  image      String?
  createdAt  DateTime @default(now())

  sender   User @relation("messagesSent", fields: [senderId], references: [id])
  receiver User @relation("messagesReceived", fields: [receiverId], references: [id])
}
